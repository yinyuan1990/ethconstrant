// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
/*

//using 库名 for 类型;

让该类型的变量可以直接使用 该库的方法


ECDSA 是 OpenZeppelin 提供的 ECDSA 数字签名库。

recover(bytes32 hash, bytes signature) → address
作用：从消息哈希（hash）和签名（signature）中解析出签名者的以太坊地址。
参数：
hash：消息的哈希值（通常已按以太坊标准格式化）。
signature：用户对哈希的签名（65字节，格式为r|s|v）。

toEthSignedMessageHash(bytes32 hash) → bytes32
作用：将原始哈希转换为以太坊签名标准格式，防止签名被用于其他场景。
原理：添加前缀 "\x19Ethereum Signed Message:\n32"，确保签名仅对特定消息有效。


abi.encode 作用是将多个参数打包成统一的字节格式，确保哈希计算一致性
✅ 防止哈希碰撞问题，避免不同数据组合生成相同哈希
✅ 保证不同的链、合约、版本计算出的 DOMAIN_SEPARATOR 具有唯一性

所以，abi.encode 是 EIP-712 结构化签名的关键步骤，确保签名验证的安全性和唯一性！ 🚀


EIP-712 全称为 “Typed Structured Data Hashing and Signing”，是一项以太坊改进提案，旨在为智能合约提供一种结构化数据的哈希和签名标准。其主要目的和特点包括：

结构化数据签名：
EIP-712 定义了一种标准格式，使签名的数据具有明确的结构（即包含字段名称、类型和值），这比传统只对字符串或单一哈希签名更安全、更直观。结构化签名让用户在签名时能够清楚地看到他们正在签署的数据内容。

防止签名混淆和重放攻击：
通过使用域分隔符（Domain Separator），EIP-712 将签名数据绑定到特定的应用、合约和链上。这样，即使同一份数据在不同环境下，生成的哈希也会不同，从而有效防止签名在其他链或合约中被重复使用（重放攻击）。

提高安全性和用户体验：
由于结构化数据包含了数据的类型和字段信息，用户在签署数据时可以更直观地知道自己在授权什么，减少了因签署无意义的十六进制字符串而引发的安全隐患。

标准化互操作：
EIP-712 为前后端、不同合约之间的签名和验证提供了统一标准，使得各方可以按照同一规则生成和验证签名，提高了互操作性。

总结来说，EIP-712 是一种用于智能合约签名的标准，它通过结构化数据和域分隔符确保签名数据的安全性、唯一性和可验证性，防止重放攻击，并提升用户在签署数据时的透明度。


bytes32 和 string 的区别
对比项	bytes32	string
存储方式	固定长度（32字节）	可变长度
存储效率	更节省Gas	较占用Gas
用途	适用于哈希值、固定长度数据	适用于可变长度文本
字符串处理	不能直接操作字符串，需要转换	适合存储和操作文本
比较方式	可直接 == 比较	需要 keccak256(abi.encodePacked(str1)) == keccak256(abi.encodePacked(str2))
转换	需要 string(abi.encodePacked(bytes32))	不能直接转换为 bytes32，需要 bytes32(abi.encodePacked(str))


bytes32 适用于固定长度数据，如哈希值、标识符等，存储效率高。
string 适用于存储可变长度的文本信息，但消耗更多Gas。



*/

contract ecdatest{


    using ECDSA for bytes32;

     
     // 定义 EIP-712 域分隔符（Domain Separator）
    bytes32 private immutable DOMAIN_SEPARATOR;

    
    //// 定义结构化消息的类型哈希（Type Hash） 
    bytes32 private constant TRANSACTION_TYPEHASH = keccak256("Transaction(address from,address to,uint256 amount,uint256 nonce)");

    //// 记录每个地址的 nonce（防重放）
    mapping(address => uint256) public  nonces;
     
    //name 版本号 链id 合约地址
    constructor(){
        
        //按照eip-712标准 获得32字节
        DOMAIN_SEPARATOR = keccak256(abi.encode(
            keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),
            keccak256("ecdatest"),
            keccak256("1.0.0"),
            block.chainid,               // 当前链ID
            address(this)                // 合约地址
        ));
        
    } 
     

    function excuteTransfar(address to,uint256 value,bytes calldata signature) public {

        address from = msg.sender;
        uint256 cnonces = nonces[from];


        bytes32 shash = keccak256(abi.encode(
            TRANSACTION_TYPEHASH,from,to,value,cnonces
        )); 

         // 2. 生成完整的 EIP-712 哈希
        bytes32 fullHash = keccak256(abi.encodePacked("\x19\x01", DOMAIN_SEPARATOR, shash));

        // 3. 恢复签名者地址
        address signer = fullHash.recover(signature);
        require(signer == from, "Invalid signature");

        // 4. 更新 nonce 并执行逻辑
        nonces[from]++;
        // 此处添加实际转账逻辑（如调用 ERC20 转账）
        
    }




}
