



/*
transfer：将代币从调用者地址转移到目标地址。

approve：允许目标地址从调用者地址转移指定数量的代币。

transferFrom：允许授权地址从所有者地址转移代币。

事件：Transfer 和 Approval 用于记录转账和授权操作。


1.1 事件的作用 emit 
记录日志：事件会将数据记录在区块链的日志中，供外部应用程序（如前端）监听和使用。

节省 Gas：相比于将数据存储在合约状态中，记录事件的 Gas 成本更低。

通知外部：外部应用程序可以通过监听事件来实时获取合约的状态变化。

1.1 indexed 的作用
索引参数：标记为 indexed 的参数会被存储在区块链日志的 索引部分，方便外部应用程序快速过滤和查询。

非索引参数：未标记为 indexed 的参数会被存储在日志的 数据部分，只能通过完整日志查询。

1.2 indexed 的限制
每个事件最多可以有 3 个 indexed 参数。

indexed 参数的类型可以是：

值类型（如 uint256、address）。

固定大小的数组（如 bytes32）。

address(0) 表示零地址，即 0x0000000000000000000000000000000000000000。

它通常用于表示无效地址、初始状态或代币销毁。

在 ERC-20 代币合约中，零地址常用于表示代币的铸造或销毁。

继承 ERC20：直接继承 OpenZeppelin 的 ERC20.sol，自动实现所有标准接口。

_mint：安全铸造代币，自动处理余额和总供应量。

无需手动实现：转账、授权、事件等逻辑已由 OpenZeppelin 封装。

OpenZeppelin 库是以太坊智能合约开发中最广泛使用的开源库之一，它封装了一系列经过严格审计和实战检验的合约模块，旨在帮助开发者更安全、高效地构建去中心化应用（DApp）。以下是它的核心封装内容和推荐使用它的原因：

ReentrancyGuard 是防止 重入攻击 的有效工具，特别是在涉及 资金转账 或 外部合约调用 的智能合约中。
何时使用：当你的合约包含可能导致 外部调用 或 转账操作 的函数时，应该考虑使用 ReentrancyGuard 来保护函数，防止被恶意合约利用进行重入攻击。
如何使用：只需在函数上加上 nonReentrant 修饰符，确保函数在执行期间无法被重入。


特性	Ownable	AccessControl
角色定义	只有一个所有者角色（owner）	可以定义多个角色（ADMIN_ROLE、USER_ROLE 等）
权限管理	只有所有者可以执行敏感操作	可以为不同角色分配不同的权限
灵活性	简单，适合权限需求较少的场景	更加灵活和细化，适合复杂的权限需求
适用场景	适用于合约需要单一所有者控制的场景	适用于多角色、多权限控制的复杂场景
权限转移	只有所有者可以转移所有权	角色可以被授予或撤销多个账户

keccak256 是一种加密哈希函数，广泛用于以太坊和其他区块链中。它是 Keccak 算法（哈希算法族）中的一种变体，在以太坊中用于生成固定长度的哈希值。keccak256 生成一个 256位（32字节） 长度的哈希值。


防重入攻击：ReentrancyGuard 修饰符防止函数被恶意重入。
权限控制：Ownable（所有权管理）、AccessControl（角色权限控制）。

声明角色。 给函数赋予角色。 给地址赋予角色。  函数--- 角色 --- 地址


签名验证：ECDSA（防止签名重放攻击）。 具体的合约都来一个 解释每一行代码的意思

*/
